package com.gsl.oros.core.banking.clients

import com.gsl.oros.core.banking.attachments.Signatures
import com.gsl.oros.core.banking.operation.Client
import com.gsl.oros.core.banking.product.clients.RetailClientUtility
import com.gsl.oros.core.banking.settings.Bank
import com.gsl.oros.core.banking.settings.BankSetup
import com.gsl.oros.core.banking.settings.Branch
import grails.converters.JSON
import org.apache.commons.io.FileUtils
import org.springframework.web.multipart.MultipartHttpServletRequest
import org.springframework.web.multipart.commons.CommonsMultipartFile

class RetailClientController {
    def attachmentService

    def index() {
        render (template: 'retailClientList')
    }

    def create() {
        render(view: 'create', model: [dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                dateMask: "99/99/9999"])
    }

    def editRetailClient(){
        Long id = params.getLong('id')
        RetailAccount retailAccountList = RetailAccount.get(id)

        def openingDate = retailAccountList.openingDate.format("dd/MM/yyyy")
        render(view: 'create', model: [tabSelector: 'tabSelectorEdit',openingDate: openingDate, retailAccountList: retailAccountList])
        render(view: 'create', model: [tabSelector: 'tabSelectorEdit',openingDate: openingDate, retailAccountList: retailAccountList])

    }
    def deleteRetailClient(){
        Long id = params.getLong('id')
        RetailAccount retailAccount = RetailAccount.get(id)
        if (!retailAccount) {
            flash.message = "Chart Class not found"
            render(template: 'retailClientList')
            return
        }
        retailAccount.status = false
        retailAccount.save(flush: true)
        flash.message = "Retail Account deleted successfully"
        render(template: 'retailClientList')
    }

    def saveRetailSignatures() {
        if (request.method == "POST") {
            Long id = params.getLong('id')
            def retailAccountId = params.retailAccount as Long
            def firstfile = request.getFile('firstSignature')
            def secondfile = request.getFile('secondSignature')
            Signatures signatures = new Signatures()
            if (firstfile && secondfile) {
                String firstOriginalFilename = firstfile.originalFilename
                firstOriginalFilename = UUID.randomUUID().toString() + ".${firstOriginalFilename.split("\\.")[-1]}"

                String secondOriginalFilename = secondfile.originalFilename
                secondOriginalFilename = UUID.randomUUID().toString() + ".${secondOriginalFilename.split("\\.")[-1]}"

                File firstStoreFile = attachmentService.storeImage(firstfile, firstOriginalFilename)
                File secondStoreFile = attachmentService.storeImage(secondfile, secondOriginalFilename)

                if (firstStoreFile && secondStoreFile) {
                    signatures.firstSignatureName = firstOriginalFilename
                    signatures.secondSignatureName = secondOriginalFilename

                    RetailAccount retailAccount = RetailAccount.read(params.retailAccount as Long)
                    signatures.retailAccount=retailAccount

                    if(id == null){
                        signatures.save(failOnError: true)
                        Long signatureId = Signatures.last().id
                        Signatures signaturesList = Signatures.get(signatureId)
                        def tabSelector = 5
                        render(template: 'attachments', model: [tabSelector: tabSelector,retailAccountId:retailAccountId, signaturesList: signaturesList])

                    }
                    else if (id != null){
                        def signaturesEdit = Signatures.get(id)
                        signaturesEdit.properties = signatures
                        signaturesEdit.save(flush: true)
                        Long signatureId = Signatures.last().id
                        Signatures signaturesList = Signatures.get(signatureId)
                        render(template: 'attachments', model: [retailAccountId:retailAccountId, signaturesList: signaturesList])
                    }
                    else{
                        //
                    }
                }
                else{
                    def result = [notSubmit: "Signature No Submitted !" ]
                    render result as JSON
                }
            }
        }
    }

    // Retail Account Save and Edit
    def saveRetailAccount(RetailAccountCommand retailAccountCommand) {
        if (!request.method == 'POST') {
            render (template: 'retailClientList')
            return
        }
        if (retailAccountCommand.hasErrors()) {
            render (view: 'create',model:[tabSelector: '1', retailAccountCommand: retailAccountCommand])
            return
        }

        Long createAccountInfoId = 111
        params.createAccountInfoId = createAccountInfoId
        def retailAccount = new RetailAccount(params)

        if(!retailAccount.validate()){
            flash.message = "Retail Account Information Not Validate!"
            render (view: 'create', model: [tabSelector: '1'])
            return
        }

        if(params.id){ // update
            def retailAccountEdit = retailAccount.get(params.id as Long)
            retailAccountEdit.properties = retailAccount
            RetailAccount retailAccountObj = retailAccountEdit.save(flush: true)
            if (!retailAccountObj){
                flash.message = "Retail Account Not Added Successfully!"
                render (view: 'create', model: [tabSelector: '1'])
                return
            }
            flash.message = "Retail Account Update Successfully!"
            render(view: 'create', model: [
                    tabSelector: '2',
                    dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                    dateMask: "99/99/9999",
                    retailAccount: retailAccountObj
            ])
        }
        else{
            RetailAccount retailAccountObj = retailAccount.save(flush: true)
            if (!retailAccountObj) {
                flash.message = "Retail Account Not Added Successfully!"
                render (view: 'create',model: [tabSelector: '1'])
                return
            }
            flash.message = "Retail Account Added Data Successfully!"
            render(view: 'create', model: [
                    tabSelector : '2', retailAccount: retailAccountObj,
                    dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                    dateMask: "99/99/9999"
            ])
        }
    }

    def saveRetailIntroducer(RetailIntroducerCommand retailIntroducerCommand) {
        if (!request.method == 'POST') {
            flash.message = "Retail Introducer data dose not added Successfully!"
            render (template: 'retailClientList')
            return
        }
        RetailAccount retailAccount = RetailAccount.read(params.retailAccount as Long)
        RetailIntroducer retailIntroducer = new RetailIntroducer(params)
        if (retailIntroducerCommand.hasErrors()) {
            render (view: 'create',model:[tabSelector: '2',retailAccount: retailAccount, retailIntroducer:retailIntroducer, retailIntroducerCommand: retailIntroducerCommand])
            return
        }

        if(!retailIntroducer.validate()){
            flash.message = "Retail Introducer data have some validated problem!"
            render (view: 'create', model:[tabSelector: '2', retailAccount: retailAccount])
            return
        }

        if(params.id){ // update
            RetailIntroducer retailIntroducerEdit = retailIntroducer.get(params.id as Long)
            retailIntroducerEdit.properties = retailIntroducer
            RetailIntroducer retailIntroducerUpdate = retailIntroducerEdit.save()
            if (!retailIntroducerUpdate){
                flash.message = "Retail Introducer data dose not update Successfully!"
                render (view: 'create', model:[tabSelector: '2'])
                return
            }
            flash.message = "Retail Introducer data update Successfully!"
            render (view: 'create', model:[tabSelector:'2', retailAccount:retailAccount, retailIntroducer:retailIntroducerUpdate])
        }
        else{ // add
            RetailIntroducer retailIntroducerSaved = retailIntroducer.save(flush: true)
            if(!retailIntroducerSaved){
                flash.message = "Retail Introducer data dose not added Successfully!"
                render (view: 'create', model:[tabSelector: '2', retailAccount: retailAccount])
                return
            }
            def c = RetailIntroducer.createCriteria()
            def retailIntroducerList = c.list {
                eq("status", true)
                eq("retailAccount", retailAccount)
            }
            flash.message = "Retail Introducer data added Successfully!"
            render(view: 'create', model: [tabSelector: '2', retailAccount: retailAccount, retailIntroducer: retailIntroducerList ])
        }
    }

    def deleteRetailIntroducer(){
        def id = params.id as Long;
        def retailAccountId = params.retailAccount as Long

        RetailIntroducer retailIntroducer = RetailIntroducer.get(id)
        if (!retailIntroducer) {
            def error = [error:'Retail Introducer id not exist']
            render error as JSON
            return
        }
        retailIntroducer.status = false
        retailIntroducer.save(flush: true)
        flash.message = "Delete Successfully!!"

        RetailAccount retailAccount = RetailAccount.read(retailAccountId)
        def c = RetailIntroducer.createCriteria()
        def retailIntroducerList = c.list {
                eq("status", true)
                eq("retailAccount", retailAccount)
        }

        render(view: 'create', model: [tabSelector: '2', retailAccount: retailAccount, retailIntroducer: retailIntroducerList ])

    }

    def saveRetailOtherBankAccount(RetailOtherBankCommand retailOtherBankCommand) {

        if (!request.method == 'POST') {
            flash.message = "Other bank account data have some problem!"
            render (template: 'retailClientList')
            return
        }
        RetailAccount retailAccount = RetailAccount.read(params.retailAccount as Long)
        if (retailOtherBankCommand.hasErrors()) {
            render (view: 'create', model:[tabSelector: '3',retailAccount: retailAccount,retailOtherBankCommand: retailOtherBankCommand])
            return
        }

        RetailOtherBank retailOtherBank = new RetailOtherBank(params)
        if(!retailOtherBank.validate()){
            flash.message = "Other bank account data have some validated problem!"
            render (view: 'create', model:[tabSelector: '3', retailAccount: retailAccount])
            return
        }

        if(params.id){  // update                     a
            def retailOtherBankEdit = retailOtherBank.get(params.id as Long)
            retailOtherBankEdit.properties = retailOtherBank
            RetailOtherBank retailOtherBankUpdate = retailOtherBankEdit.save()
            if (!retailOtherBankUpdate){
                flash.message = "Other Bank account data dose not update Successfully!"
                render (view: 'create', model:[tabSelector: '3', retailAccount: retailAccount])
                return
            }
            flash.message = "Other Bank account data update Successfully!"
            render (view: 'create', model:[tabSelector:'3', retailAccount:retailAccount, retailOtherBank: retailOtherBankUpdate])

        }
        else{   // add
            RetailOtherBank retailOtherBankSaved = retailOtherBank.save()
            if(!retailOtherBankSaved){
                flash.message = "Other Bank account data dose not added Successfully!"
                render (view: 'create', model:[tabSelector: '2', retailAccount: retailAccount])
                return
            }
            def c = RetailOtherBank.createCriteria()
            def retailOtherBankList = c.list {
                eq("status", true)
                eq("retailAccount", retailAccount)
            }
            flash.message = "Other Bank account data added Successfully!"
            render(view: 'create', model:[tabSelector: '3', retailAccount: retailAccount, retailOtherBank: retailOtherBankList ])

        }

    }

    def editOtherBankAccount(){
        Long id = params.id as Long
        RetailOtherBank retailOtherBank = RetailOtherBank.findById(id)
        Bank bank = Bank.findById(retailOtherBank.bank.id as Long)
        Branch branch = Branch.findById(retailOtherBank.branch.id as Long)
        def result = [retailOtherBank: retailOtherBank, bank: bank, branch: branch, id: id]
        render result as JSON
    }

    def deleteOtherBankAccount(){
        def retailAccountId = params.retailAccount as Long
        RetailOtherBank retailOtherBank = RetailOtherBank.get(params.id as Long)
        if (!retailOtherBank) {
            //flash.message = "Other Bank account delete Successfully!"
            //render(view: 'create', model: [tabSelector: '3', retailAccount: retailAccount, retailOtherBank: retailOtherBankList])
        }
        retailOtherBank.status = false
        retailOtherBank.save(flush: true)
        RetailAccount retailAccount = RetailAccount.read(retailAccountId)
        def c = RetailOtherBank.createCriteria()
        def retailOtherBankList = c.list {
            eq("status", true)
            eq("retailAccount", retailAccount)
        }
        flash.message = "Other Bank account delete Successfully!"
        render(view: 'create', model: [tabSelector: '3', retailAccount: retailAccount, retailOtherBank: retailOtherBankList])
    }

    def saveRetailNomineeInfo(RetailNomineeCommand retailNomineeCommand) {
        if (!request.method == 'POST') {
            flash.message = "Nominee data dose not added Successfully!"
            render (template: 'retailClientList')
            return
        }
        RetailAccount retailAccount = RetailAccount.read(params.retailAccount as Long)
        RetailNominee retailNominee = new RetailNominee(params)
        if (retailNomineeCommand.hasErrors()) {
            render (view: 'create',
                    model:[tabSelector: '4',retailAccount: retailAccount, retailNominee:retailNominee, retailNomineeCommand: retailNomineeCommand])
            return
        }
        if(!retailNominee.validate()){
            flash.message = "Nominee data have some validated problem!"
            render (view: 'create', model:[tabSelector: '4', retailAccount: retailAccount])
            return
        }

        if(params.id){ // update
            RetailNominee retailNomineeEdit = retailNominee.get(params.id as Long)
            retailNomineeEdit.properties = retailNominee
            RetailNominee retailNomineeUpdate = retailNomineeEdit.save()
            if (!retailNomineeUpdate){
                flash.message = "Nominee data dose not update Successfully!"
                render (view: 'create', model:[tabSelector: '4', retailAccount:retailAccount])
                return
            }
            flash.message = "Nominee data update Successfully!"
            render (view: 'create', model:[
                    tabSelector:'5',
                    retailAccount:retailAccount,
                    retailNominee: retailNomineeUpdate,
                    dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                    dateMask: "99/99/9999"
            ])
        }
        else{ // add
            RetailNominee retailNomineeSaved = retailNominee.save(flush: true)
            if(!retailNomineeSaved){
                flash.message = "Nominee data dose not added Successfully!"
                render (view: 'create', model:[tabSelector: '4', retailAccount: retailAccount])
                return
            }
            flash.message = "Nominee data added Successfully!"
            render(view: 'create', model: [
                    tabSelector: '5',
                    retailAccount: retailAccount,
                    retailNominee: retailNomineeSaved,
                    dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                    dateMask: "99/99/9999"
            ])
        }
    }

    def checkAccountNo() {
        def accountNo = params.accountNo
        def result = Client.findByAccountNo(accountNo)
        def r = [result: result]
        render r as JSON
    }

    def fetchBranch(Long id) {
        Bank bank = Bank.read(id)
        List<Branch> branch = Branch.findAllByBank(bank)
        for (def i = 0; i < branch.size(); i++) {
            render "<option value='${branch.id[i]}'>${branch.name[i]}</option>"
        }

    }

    def list(){
        println(params)
        int sEcho = params.sEcho?params.getInt('sEcho'):1
        int iDisplayStart = params.iDisplayStart? params.getInt('iDisplayStart'):0
        int iDisplayLength = params.iDisplayLength? params.getInt('iDisplayLength'):10
        String sSortDir = params.sSortDir_0? params.sSortDir_0:'asc'
        int iSortingCol = params.iSortingCols? params.getInt('iSortingCols'):1
        //Search string, use or logic to all fields that required to include
        String sSearch = params.sSearch?params.sSearch:null
        if(sSearch){
            sSearch = "%"+sSearch+"%"
        }
        String sortColumn = RetailClientUtility.getSortColumn(iSortingCol)
        List dataReturns = new ArrayList()
        def c = RetailAccount.createCriteria()
        def results = c.list (max: iDisplayLength, offset:iDisplayStart) {
            and {
                eq("status", true)
            }
            if(sSearch){
                or {
                    ilike('title',sSearch)
                }
            }
            order(sortColumn, sSortDir)
        }
        int totalCount = results.totalCount
        int serial = iDisplayStart;
        if(totalCount>0){
            if(sSortDir.equalsIgnoreCase('desc')){
                serial =(totalCount+1)-iDisplayStart
            }
            results.each {RetailAccount retailAccount ->
                if(sSortDir.equalsIgnoreCase('asc')){
                    serial++
                }else{
                    serial--
                }
                dataReturns.add([DT_RowId:retailAccount.id,0:serial,1:retailAccount.title,2:retailAccount.accountPurpose,3:retailAccount.openingDate.format("dd/MM/yyyy"),4:''])
            }
        }
        Map gridData =[iTotalRecords:totalCount,iTotalDisplayRecords:totalCount,aaData:dataReturns]
        String result = gridData as JSON
        println(result)
        render result
    }
}


// Command Object
class RetailAccountCommand {
    String title
    Date openingDate
    String accountPurpose
    Integer termAndCondition

    static constraints = {
        title blank: false, nullable: false
        openingDate blank: false, nullable: false
        accountPurpose blank: false, nullable: false
        termAndCondition blank: false, nullable: false
        //status blank: true, nullable: true
    }

}

class RetailIntroducerCommand {
    String relation
    Client client

    static constraints = {
        relation blank: false, nullable: false
        client blank: false, nullable: false
    }

}

class RetailOtherBankCommand {

    String accountNo
    String accountName
    String type
    String sortCode

    static constraints = {
        accountNo   blank: false, nullable: false
        accountName blank: false, nullable: false
        type        blank: false, nullable: false
        sortCode    blank: false, nullable: false
    }
}

class RetailNomineeCommand{
    String accountNo
    Date dob
    String gender

    static constraints = {
        accountNo blank: false, nullable: false
        dob blank: false, nullable: false
        gender blank: false, nullable: false
    }
}
