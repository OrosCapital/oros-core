package com.gsl.oros.core.banking.clients

import com.gsl.oros.core.banking.attachments.Signatures
import com.gsl.oros.core.banking.operation.Client
import com.gsl.oros.core.banking.product.clients.RetailClientUtility
import com.gsl.oros.core.banking.settings.Bank
import com.gsl.oros.core.banking.settings.BankSetup
import com.gsl.oros.core.banking.settings.Branch
import com.gsl.plugin.attachments.AttachStatus
import com.gsl.plugin.attachments.OrosAttachment
import grails.converters.JSON
import org.apache.commons.io.FileUtils
import org.springframework.web.multipart.MultipartFile
import org.springframework.web.multipart.MultipartHttpServletRequest
import org.springframework.web.multipart.commons.CommonsMultipartFile

class RetailClientController {
    def imageIndirectService

    def index() {
        render (template: 'retailClientList')
    }

    def create() {
        render(view: 'create', model: [dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                dateMask: "99/99/9999"])
    }

    def editRetailClient(){
        Long id = params.getLong('id')
        RetailAccount retailAccount = RetailAccount.get(id)

        retailAccount?.retailIntroducer?.removeAll{it.status== false}
        retailAccount?.retailNominee?.removeAll{it.status== false}
        retailAccount?.retailOtherBank?.removeAll{it.status== false}
        retailAccount?.retailSignature?.removeAll{it.status== AttachStatus.INACTIVE}

        render(view: 'create', model: [
                retailAccount: retailAccount,
                dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                dateMask: "99/99/9999"
        ])
    }
    def deleteRetailClient(){
        Long id = params.getLong('id')
        RetailAccount retailAccount = RetailAccount.get(id)
        if (!retailAccount) {
            flash.message = "Retail Client Account dose not found!!"
            render(template: 'retailClientList')
            return
        }
        retailAccount.status = false
        retailAccount.save(flush: true)
        flash.message = "Retail Client Account deleted successfully!!"
        render(template: 'retailClientList')
    }

    def saveRetailSignatures(SignaturesCommand signaturesCommand) {

        String type
        Long size
        String fileName
        String originalFileName

        if (!request.method == 'POST') {
            flash.message = "Signature data have some problem!"
            render (template: 'retailClientList')
            return
        }

        RetailAccount retailAccount = RetailAccount.get(signaturesCommand.retailAccount.id)
        if (!retailAccount) {
            flash.message = "Retail Client account dose not found!"
            render (template: 'attachments', model: [retailAccount:retailAccount])
            return
        }
        if (signaturesCommand.hasErrors()) {
            def result = [isError:true, message:"Signature data have some problem!!!"]
            render result as JSON
            return
        }

        OrosAttachment orosAttachment

        if(params.firstId && params.secondId){ // for update
            List<OrosAttachment> signatureList = new LinkedList<OrosAttachment>();
            def signatureArray = []
            signatureArray.add(params.firstId)
            signatureArray.add(params.secondId)

            for (int i = 0; i < 2; i++) {
                fileName = request.getFileNames()[i]
                MultipartFile uploadedFile = request.getFile(fileName)
                type = uploadedFile.contentType
                size = uploadedFile.size
                originalFileName = uploadedFile.originalFilename

                if( !(type in ['image/jpeg','image/gif','image/bmp','image/png','image/jpg']) ){
                    def result = [isError:true, message:"Signature file type is not validated!!"]
                    render result as JSON
                    return
                }
                if(size >= 900000){
                    def result = [isError:true, message:"Signature file size is too large!!"]
                    render result as JSON
                    return
                }

                OrosAttachment signature = OrosAttachment.get(signatureArray[i] as Long)
                String fileDir = retailAccount.id.toString()
                /*if (uploadedFile.empty) {
                    orosAttachment.properties['name','originalName','type','fileDir','size'] = [
                            name: signature.name,
                            originalName: signature.originalName,
                            type: signature.type,
                            fileDir: signature.fileDir,
                            size: signature.size
                    ]
                }*/
                orosAttachment = new OrosAttachment(
                        name: fileName,
                        originalName: originalFileName,
                        type: type,
                        fileDir: fileDir,
                        size: size
                )

                if(!orosAttachment.validate()){
                    def result = [isError:true, message:"Signature not validated successfully!!"]
                    render result as JSON
                    return
                }

                signature.properties = orosAttachment
                OrosAttachment savedSignature = signature.save(flush: true)
                if(!savedSignature){
                    def result = [isError:true, message:"Signature not save successfully!!"]
                    render result as JSON
                    return
                }
                retailAccount.getRetailSignature().add(savedSignature)
                //savedAccount = retailAccount.save(flash:true)

                File savedFile = imageIndirectService.storeFile(uploadedFile,orosAttachment.link,fileDir)
                if(!savedFile){
                    def result = [isError:true, message:"Signature added successfully!!"]
                    render result as JSON
                    return
                }
                signatureList.add(savedSignature)
            }

            def result = [isError:false,update: true, message: "Signature update Successfully!", signatureList: signatureList]
            render result as JSON
            return
        }
        else { // add
            List<OrosAttachment> signatureList = new LinkedList<OrosAttachment>();

            String fileDir = retailAccount.id.toString()
            for (int i = 0; i < 2; i++) {
                fileName = request.getFileNames()[i]
                MultipartFile uploadedFile = request.getFile(fileName)
                type = uploadedFile.contentType
                size = uploadedFile.size
                originalFileName = uploadedFile.originalFilename

                if( !(type in ['image/jpeg','image/gif','image/bmp','image/png','image/jpg']) ){
                    def result = [isError:true, message:"Signature file type is not validated!!"]
                    render result as JSON
                    return
                }

                if(size >= 900000){
                    def result = [isError:true, message:"Signature file size is too large!!"]
                    render result as JSON
                    return
                }

                if (uploadedFile.empty) {
                    def result = [isError:true, message:"Signature not uploaded successfully!!"]
                    render result as JSON
                    return
                }

                orosAttachment = new OrosAttachment(
                        name: fileName,
                        originalName: originalFileName,
                        type: type,
                        fileDir: fileDir,
                        size: size
                )
                if(!orosAttachment.validate()){
                    def result = [isError:true, message:"Signature not validated successfully!!"]
                    render result as JSON
                    return
                }

                OrosAttachment savedSignature = orosAttachment.save(flush: true)
                if(!savedSignature){
                    def result = [isError:true, message:"Signature not save successfully!!"]
                    render result as JSON
                    return
                }
                retailAccount.getRetailSignature().add(savedSignature)
                //savedAccount = retailAccount.save(flash:true)

                File savedFile = imageIndirectService.storeFile(uploadedFile,orosAttachment.link,fileDir)
                if(!savedFile){
                    def result = [isError:true, message:"Signature added successfully!!"]
                    render result as JSON
                    return
                }
                signatureList.add(savedSignature)
            }
            def result = [isError:false, add: true, message:"Signature added successfully!!", signatureList: signatureList]
            String successStr = result as JSON
            render successStr
        }

    }

    def deleteRetailSignatures(){
        String id = params.id
        def values = id.split(',')
        for (int i = 0; i < values.length; i++) {
            Long signatureId = values[i] as Long
            OrosAttachment retailsignature = OrosAttachment.get(signatureId)
            if (!retailsignature) {
                def result = [isError:true, message:"Signature dose not delete successfully!"]
                render result as JSON
                return
            }

            retailsignature.status = AttachStatus.INACTIVE
            def savedSignature = retailsignature.save(flush: true)
            if(!savedSignature){
                def result = [isError:true, message:"Signature" + retailsignature.originalName + "dose not delete successfully!"]
                render result as JSON
                return
            }
        }

        def result = [isError:false, message:"Signature Delete successsfully!"]
        render result as JSON
    }

    // Retail Account Save and Edit
    def saveRetailAccount(RetailAccountCommand retailAccountCommand) {
        if (!request.method == 'POST') {
            render (template: 'retailClientList')
            return
        }
        if (retailAccountCommand.hasErrors()) {
            render (view: 'create',model:[tabSelector: '1', retailAccountCommand: retailAccountCommand])
            return
        }

        if(retailAccountCommand.id){ // update
            RetailAccount retailAccount = RetailAccount.get(retailAccountCommand.id)
            retailAccount.properties = retailAccountCommand.properties
            if(!retailAccount.validate()){
                flash.message = "Retail Account Information Not validated!"
                render (view: 'create', model: [tabSelector: '1'])
                return
            }
            RetailAccount savedAccount = retailAccount.save(flash:true)
            if(!savedAccount){
                flash.message = "Retail Account Not Update Data Successfully!"
                render (view: 'create', model: [tabSelector: '1'])
                return
            }

            savedAccount?.retailIntroducer?.removeAll{it.status== false}
            savedAccount?.retailNominee?.removeAll{it.status== false}
            savedAccount?.retailOtherBank?.removeAll{it.status== false}
            savedAccount?.retailSignature?.removeAll{it.status== AttachStatus.INACTIVE}

            flash.message = "Retail Account Update Data Successfully!"
            render(view: 'create', model: [
                    tabSelector : '1',
                    retailAccount: savedAccount,
                    dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                    dateMask: "99/99/9999"
            ])
        }
        else{
            RetailAccount retailAccount = new RetailAccount(retailAccountCommand.properties)
            if(!retailAccount.validate()){
                flash.message = "Retail Account Information Not Validate!"
                render (view: 'create', model: [tabSelector: '1'])
                return
            }
            RetailAccount savedAccount = retailAccount.save(flash:true)
            if(!savedAccount){
                flash.message = "Retail Account Not Added Data Successfully!"
                render (view: 'create', model: [tabSelector: '1'])
                return
            }
            flash.message = "Retail Account Added Data Successfully!"
            render(view: 'create', model: [
                    tabSelector : '2',
                    retailAccount: savedAccount,
                    dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                    dateMask: "99/99/9999"
            ])
        }
    }

    def saveRetailIntroducer(RetailIntroducerCommand retailIntroducerCommand) {

        if (!request.method == 'POST') {
            flash.message = "Retail Introducer have some problem!"
            render (template: 'retailClientList')
            return
        }
        RetailAccount retailAccount = RetailAccount.get(retailIntroducerCommand.retailAccount.id)
        if (!retailAccount) {
            flash.message = "Retail Client account dose not found!"
            render (template: 'retailClientList')
            return
        }
        if (retailIntroducerCommand.hasErrors()) {
            def result = [isError:true, message:"Introducer data have some problem!!!"]
            render result as JSON
            return
        }

        RetailIntroducer retailIntroducer = new RetailIntroducer(retailIntroducerCommand.properties)
        if(!retailIntroducer.validate()){
            def result = [isError:true, message:"Introducer data have some validated problem!!"]
            render result as JSON
            return
        }

        RetailIntroducer savedIntroducer = retailIntroducer.save(flush: true)
        if(!savedIntroducer){
            def result = [isError:true, message:"Introducer dose not save successfully!!"]
            render result as JSON
            return
        }

        retailAccount.getRetailIntroducer().add(savedIntroducer)
        RetailAccount savedAccount = retailAccount.save(flash:true)

        def result = [isError:false, message:"Introducer Information data added successsfully!", introducer: savedIntroducer, client:retailIntroducerCommand.client ]
        render result as JSON
    }

    def deleteRetailIntroducer(){
        RetailIntroducer retailIntroducer = RetailIntroducer.get(params.id as Long)
        if (!retailIntroducer) {
            def result = [isError:true, message:"Introducer dose not delete successfully!"]
            render result as JSON
            return
        }
        retailIntroducer.status = false
        def savedIntroducer = retailIntroducer.save(flush: true)
        if(!savedIntroducer){
            def result = [isError:true, message:"Introducer dose not delete successfully!"]
            render result as JSON
            return
        }
        def result = [isError:false, message:"Introducer Delete successsfully!"]
        String output = result as JSON
        render output
    }

    def saveRetailOtherBankAccount(RetailOtherBankCommand retailOtherBankCommand) {

        if (!request.method == 'POST') {
            flash.message = "Other bank account data have some problem!"
            render (template: 'retailClientList')
            return
        }

        if (retailOtherBankCommand.hasErrors()) {
            def result = [isError:true, message:"Other bank account data have some problem!!"]
            render result as JSON
            return
        }

        RetailAccount retailAccount = RetailAccount.read(retailOtherBankCommand.retailAccount.id)
        if (!retailAccount) {
            flash.message = "Retail Client account dose not found!"
            render (template: 'retailClientList')
            return
        }


        if(retailOtherBankCommand.id){  // update
            def row = params.row
            RetailOtherBank retailOtherBank = RetailOtherBank.get(retailOtherBankCommand.id)
            retailOtherBank.properties = retailOtherBankCommand.properties
            if(!retailOtherBank.validate()){
                def result = [isError:true, message:"Other bank account data have some validated problem!!"]
                render result as JSON
                return
            }
            RetailOtherBank retailOtherBankUpdate = retailOtherBank.save()
            if (!retailOtherBankUpdate){
                def result = [isError:true, message:"Other bank account data not update successfully!!"]
                render result as JSON
                return
            }
            def result = [isError:false, message:"Other bank account information data update successsfully!", update:true, retailOtherBank: retailOtherBankUpdate, bank: retailOtherBankCommand.bank.name, branch: retailOtherBankCommand.branch.name, row: row]
            render result as JSON
        }
        else{   // add
            RetailOtherBank retailOtherBank = new RetailOtherBank(retailOtherBankCommand.properties)
            if(!retailOtherBank.validate()){
                def result = [isError:true, message:"Other bank account data not validated successfully!!"]
                render result as JSON
                return
            }
            RetailOtherBank retailOtherBankSaved = retailOtherBank.save()
            if(!retailOtherBankSaved){
                def result = [isError:true, message:"Other bank account data not added successfully!!"]
                render result as JSON
                return
            }

            retailAccount.getRetailOtherBank().add(retailOtherBankSaved)
            RetailAccount savedAccount = retailAccount.save(flash:true)

            def result = [isError:false, add:true, message:"Other bank account information data added successsfully!", retailOtherBank: retailOtherBankSaved, bank: retailOtherBankCommand.bank.name, branch: retailOtherBankCommand.branch.name]
            render result as JSON
        }

    }

    def editOtherBankAccount(){
        def row = params.row
        RetailOtherBank retailOtherBank = RetailOtherBank.findById(params.id as Long)
        if(!retailOtherBank){
            def result = [isError:true, message:"Data not find !!"]
            render result as JSON
            return
        }
        Bank bank = Bank.findById(retailOtherBank.bank.id as Long)
        Branch branch = Branch.findById(retailOtherBank.branch.id as Long)
        def result = [isError:false, retailOtherBank: retailOtherBank, bank: bank, branch: branch, row:row]
        render result as JSON
    }

    def deleteOtherBankAccount(){
        RetailOtherBank retailOtherBank = RetailOtherBank.get(params.id as Long)
        if (!retailOtherBank) {
            def result = [isError:true, message:"Have some problem!!"]
            render result as JSON
            return
        }
        retailOtherBank.status = false
        RetailOtherBank retailOtherBankSaved = retailOtherBank.save(flush: true)
        if (!retailOtherBankSaved){
            def result = [isError:true, message:"Other bank account information does not delete!!"]
            render result as JSON
            return
        }

        def result = [isError:false, message:"Delete other bank account information data successsfully!"]
        render result as JSON
    }

    def saveRetailNomineeInfo(RetailNomineeCommand retailNomineeCommand) {
        if (!request.method == 'POST') {
            flash.message = "Nominee data dose not added Successfully!"
            render (template: 'retailClientList')
            return
        }

        RetailAccount retailAccount = RetailAccount.read(retailNomineeCommand.retailAccount.id)
        if (retailNomineeCommand.hasErrors()) {
            def result = [isError:true, message:"Have some problem!!"]
            render result as JSON
            return
        }

        if(retailNomineeCommand.id){ // update
            def row = params.row
            RetailNominee retailNominee = RetailNominee.get(retailNomineeCommand.id)
            retailNominee.properties = retailNomineeCommand.properties
            RetailNominee retailNomineeSaved = retailNominee.save()
            if (!retailNomineeSaved){
                def result = [isError:true, message:"Nominee information have some problem!"]
                render result as JSON
                return
            }
            def result = [isError:false, message:"Nominee information data update successsfully!", update:true, retailNominee: retailNomineeSaved, row: row]
            render result as JSON
        }
        else{ // add
            RetailNominee retailNominee = new RetailNominee(retailNomineeCommand.properties)
            RetailNominee retailNomineeSaved = retailNominee.save(flush: true)
            if(!retailNomineeSaved){
                def result = [isError:true, message:"Have some problem!!"]
                render result as JSON
                return
            }

            retailAccount.getRetailNominee().add(retailNomineeSaved)
            //RetailAccount savedAccount = retailAccount.save(flash:true)

            def result = [isError:false, add:true, message:"Nominee Information Added successsfully!", retailNominee: retailNomineeSaved]
            render result as JSON
        }
    }

    def deleteRetailNominee(){
        RetailNominee retailNominee = RetailNominee.get(params.id as Long)
        if (!retailNominee) {
            def result = [isError:true, message:"Retail Account data not exist!"]
            render result as JSON
            return
        }
        retailNominee.status = false
        RetailNominee retailNomineeSaved = retailNominee.save(flush: true)
        if (!retailNomineeSaved){
            def result = [isError:false, message:"Nominee information not delete successsfully!"]
            render result as JSON
            return
        }

        def result = [isError:false, message:"Nominee information delete successsfully!"]
        render result as JSON
    }

    def editRetailNominee(){
        def row = params.row
        RetailNominee retailNominee = RetailNominee.findById(params.id as Long)
        if(!retailNominee){
            def result = [isError:true, message:"Data not find !!"]
            render result as JSON
            return
        }
        def dobDate = retailNominee.dob.format('dd/MM/yyyy')
        def result = [isError:false, retailNominee: retailNominee, dobDate: dobDate, row: row]
        render result as JSON
    }

    def checkAccountNo() {
        def result = Client.findByAccountNo(params.accountNo)
        def r = [result: result]
        render r as JSON
    }

    def fetchBranch(Long id) {
        Bank bank = Bank.read(id)
        List<Branch> branch = Branch.findAllByBank(bank)
        for (def i = 0; i < branch.size(); i++) {
            render "<option value='${branch.id[i]}'>${branch.name[i]}</option>"
        }

    }

    def list(){
        println(params)
        int sEcho = params.sEcho?params.getInt('sEcho'):1
        int iDisplayStart = params.iDisplayStart? params.getInt('iDisplayStart'):0
        int iDisplayLength = params.iDisplayLength? params.getInt('iDisplayLength'):10
        String sSortDir = params.sSortDir_0? params.sSortDir_0:'asc'
        int iSortingCol = params.iSortingCols? params.getInt('iSortingCols'):1
        //Search string, use or logic to all fields that required to include
        String sSearch = params.sSearch?params.sSearch:null
        if(sSearch){
            sSearch = "%"+sSearch+"%"
        }
        String sortColumn = RetailClientUtility.getSortColumn(iSortingCol)
        List dataReturns = new ArrayList()
        def c = RetailAccount.createCriteria()
        def results = c.list (max: iDisplayLength, offset:iDisplayStart) {
            and {
                eq("status", true)
            }
            if(sSearch){
                or {
                    ilike('title',sSearch)
                }
            }
            order(sortColumn, sSortDir)
        }
        int totalCount = results.totalCount
        int serial = iDisplayStart;
        if(totalCount>0){
            if(sSortDir.equalsIgnoreCase('desc')){
                serial =(totalCount+1)-iDisplayStart
            }
            results.each {RetailAccount retailAccount ->
                if(sSortDir.equalsIgnoreCase('asc')){
                    serial++
                }else{
                    serial--
                }
                dataReturns.add([DT_RowId:retailAccount.id,0:serial,1:retailAccount.title,2:retailAccount.accountPurpose,3:retailAccount.openingDate.format("dd/MM/yyyy"),4:''])
            }
        }
        Map gridData =[iTotalRecords:totalCount,iTotalDisplayRecords:totalCount,aaData:dataReturns]
        String result = gridData as JSON
        render result
    }
}


// Command Object
class RetailAccountCommand {
    Long id
    String title
    Date openingDate
    String accountPurpose
    Integer termAndCondition
    Long createAccountInfoId // fk

    static constraints = {
        id blank: true,nullable: true
        title blank: false, nullable: false
        openingDate blank: false, nullable: false
        accountPurpose blank: false, nullable: false
        termAndCondition blank: false, nullable: false
    }

}

class RetailIntroducerCommand {
    Long id
    String relation
    Client client
    RetailAccount retailAccount

    static constraints = {
        id blank: true, nullable: true
        relation blank: false, nullable: false
        client blank: false, nullable: false
    }

}

class RetailOtherBankCommand {
    Long id
    String accountNo
    String accountName
    String type
    String sortCode
    Bank bank
    Branch branch
    RetailAccount retailAccount

    static constraints = {
        id blank: true, nullable: true
        accountNo   blank: false, nullable: false
        accountName blank: false, nullable: false
        type        blank: false, nullable: false
        sortCode    blank: false, nullable: false
    }
}

class RetailNomineeCommand{
    Long id
    String firstName
    String middleName
    String lastName
    String email
    String addressLine1
    String addressLine2
    String accountNo
    Date dob
    String branchName
    String contactNo
    String type
    String relation
    String gender
    RetailAccount retailAccount

    static constraints = {
        id blank: true, nullable: true
        firstName blank: true, nullable: true
        middleName blank: true, nullable: true
        lastName blank: true, nullable: true
        email blank: true, nullable: true
        addressLine1 blank: true, nullable: true
        addressLine2 blank: true, nullable: true
        accountNo blank: false, nullable: false   // must fillup
        dob blank: false, nullable: false         // must fillup
        branchName blank: true, nullable: true
        contactNo blank: true, nullable: true
        type blank: true, nullable: true
        relation blank: true, nullable: true
        gender blank: false, nullable: false      // must fillup
     }
}

class SignaturesCommand {

    Long id
    RetailAccount retailAccount

    static constraints = {
        id blank: true, nullable: true
    }
}


