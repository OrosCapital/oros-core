package com.gsl.oros.core.banking.operation

import com.gsl.oros.core.banking.accountHolder.AccountHolder
import com.gsl.oros.core.banking.clients.RetailOtherBank
import com.gsl.oros.core.banking.settings.Bank
import com.gsl.oros.core.banking.settings.BankSetup
import com.gsl.oros.core.banking.settings.Branch
import com.gsl.plugin.attachments.OrosAttachment
import grails.converters.JSON
import org.springframework.web.multipart.MultipartFile

class AccountOpenController {
    def imageIndirectService

    def index() {
        int tabSelector = 1
        render(view: '/coreBanking/settings/operation/accountOpen',
                model: [tabSelector: tabSelector,
                        dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                        dateMask: "99/99/9999",
                        currentDt: new Date().format("dd/MM/yyyy")])

    }

    def createAccount() {
        render(template: '/coreBanking/settings/operation/createAccount')
    }

    def showClientInfo(Long clientId) {
        Map accountHolderMap
        AccountHolder accountHolder = AccountHolder.findById(clientId)
        if (!accountHolder) {
            accountHolderMap = [available: false, message: "Account holder not found"]
            render(accountHolderMap as JSON)
            return
        }
        accountHolderMap = [accountHolder: accountHolder, nationalilty: accountHolder.nationality1.name]
        render(accountHolderMap as JSON)
    }

    def saveAttachment(AttachmentsCommand attachmentsCommand) {

        String type
        Long size
        String fileName
        String originalFileName

        if (!request.method == 'POST') {
            flash.message = "Signature data have some problem!"
            render(template: 'retailClientList')
            return
        }

        Account account = Account.get(attachmentsCommand.accountObjId.id)
        if (!account) {
            flash.message = "Account not found!"
//            render (template: 'retailClientList')
            return
        }
        if (attachmentsCommand.hasErrors()) {
            def result = [isError: true, message: "Attachment data have some problem!!!"]
            render result as JSON
            return
        }

        OrosAttachment orosAttachment

        if (attachmentsCommand.id) { // for update
            def result = [isError: false, message: "Attachment update action !!"]
            render result as JSON
        } else { // add
            String fileDir = account.id.toString()
            fileName = request.getFileNames()[0]
            MultipartFile uploadedFile = request.getFile(fileName)
            type = uploadedFile.contentType
            size = uploadedFile.size
            originalFileName = uploadedFile.originalFilename

            if (!(type in ['image/jpeg', 'image/gif', 'image/bmp', 'image/png', 'image/jpg'])) {
                def result = [isError: true, message: "Attachment file type is not validated!!"]
                render result as JSON
                return
            }

            if (size >= 900000) {
                def result = [isError: true, message: "Attachment file size is too large!!"]
                render result as JSON
                return
            }

            if (uploadedFile.empty) {
                def result = [isError: true, message: "Attachment not uploaded successfully!!"]
                render result as JSON
                return
            }
            orosAttachment = new OrosAttachment(
                    name: fileName,
                    originalName: originalFileName,
                    type: type,
                    fileDir: fileDir,
                    size: size
            )
            if (!orosAttachment.validate()) {
                def result = [isError: true, message: "Attachment not validated successfully!!"]
                render result as JSON
                return
            }

            OrosAttachment savedSignature = orosAttachment.save(flush: true)
            if (!savedSignature) {
                def result = [isError: true, message: "Attachment not save successfully!!"]
                render result as JSON
                return
            }

            File savedFile = imageIndirectService.storeFile(uploadedFile, orosAttachment.link, fileDir)
            if (!savedFile) {
                def result = [isError: true, message: "Attachment added successfully!!"]
                render result as JSON
                return
            }
            def result = [isError: false, message: "Attachment added successfully!!"]
            String successStr = result as JSON
            render successStr
        }

    }

    private List longList(List<String> clients) {
        List result = new ArrayList();
        for (int i = 0; i < clients.size(); i++)
            result.add(Long.parseLong(clients.get(i)));
        return result;
    }

    def saveAccount() {
        int accountCategory = Integer.parseInt(params.accountCategoryId)
        int accountType = Integer.parseInt(params.accountTypeId)
        List<Long> clientIds = []
        AccountOpen accountOpen = null
        if (params.jointClients) {
            List<String> jClients = (List<String>) params.jointClients
            jClients = longList(jClients)
            jClients.add(Long.parseLong(params.clientId).toString())

            for (int i = 0; i < jClients.size(); i++) {
                clientIds << Long.parseLong(jClients[i].toString())
            }

            for (int i = 0; i < clientIds.size(); i++) {
                accountOpen = new AccountOpen()
                accountOpen.client = clientIds[i]
                accountOpen.accountCategory = accountCategory
                accountOpen.accountType = accountType
                accountOpen.save(flush: true)
            }

        } else {
            accountOpen = new AccountOpen(
                    client: params.clientId,
                    accountCategory: accountCategory,
                    accountType: accountType,
            )
            accountOpen.save(flush: true);
        }

        def tabSelector = 1
        flash.message = " Account created successfully"
        render(view: '/coreBanking/settings/operation/accountOpen',
                model: [accountTitle: accountOpen.client,
                        accountOpenObj: accountOpen,
                        accountType: accountType,
                        accountCategory: accountCategory,
                        tabSelector: tabSelector,
                        dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                        dateMask: "99/99/9999", currentDt: new Date().format("dd/MM/yyyy"), decimalSep: BankSetup.properties.decimalSeparator ? BankSetup.properties.decimalSeparator : 2])
    }

    def accOpenBasicInfoSave(AccOpenBasicInfoCommand accOpenBasicInfoCommand) {
        if (request.method == 'POST') {
            int tabSelector = 2
            if (accOpenBasicInfoCommand.hasErrors()) {
                render(view: '/coreBanking/settings/operation/accountOpen', model: [commandObj: accOpenBasicInfoCommand, tabSelector: tabSelector])
                return
            }
        /*   AccountOpen accountOpen = AccountOpen.read(params.accountOpenId)
            if(accountOpen){
                flash.message = "Account already exists"
                render(view: '/coreBanking/settings/operation/accountOpen', model: [commandObj: accOpenBasicInfoCommand, tabSelector: tabSelector])
                return
            }*/
            Account account = new Account(accOpenBasicInfoCommand.properties)
            account.accountOpen = AccountOpen.read(params.accountOpenId)
            if (!account.validate()) {
                render(view: '/coreBanking/settings/operation/accountOpen', model: [commandObj: accOpenBasicInfoCommand, tabSelector: tabSelector])
                return
            }
            Account saveAccObj = account.save(flush: true)
            flash.message = "Account information save successfully"
            render(view: '/coreBanking/settings/operation/accountOpen',
                    model: [saveAccObj: saveAccObj,
                            accountCategory: accOpenBasicInfoCommand.modeOfOperation,
                            accountType: accOpenBasicInfoCommand.natureOfOperation,
                            accountOpenId: params.accountOpenId,
                            openingDate: saveAccObj.openingDate.format("dd/MM/yyyy"),
                            accountTitle: saveAccObj.accountTitle,
                            dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                            dateMask: "99/99/9999",
                            tabSelector: tabSelector])
        }
    }

    def introducerInfoSave(IntroducerInfoCommand introducerInfoCommand) {

        Account account = Account.get(introducerInfoCommand.id)
        if (!account) {
            flash.message = "Account not found"
            return
        }
        if (introducerInfoCommand.hasErrors()) {
            def result = [isError: true, message: "Introducer data have some problem!!!"]
            String output = result as JSON
            render(output)
            return
        }

        AccountIntroducer accountIntroducer = new AccountIntroducer(introducerInfoCommand.properties)
        if (!accountIntroducer.validate()) {
            def result = [isError: true, message: "Introducer data have some validated problem!!"]
            render(result as JSON)
            return
        }

        AccountIntroducer saveIntroducerInstance = accountIntroducer.save(flush: true)
        if (!saveIntroducerInstance) {
            def result = [isError: true, message: "Introducer dose not save successfully!!"]
            render(result as JSON)
            return
        }

        account.getAccIntroducer().add(saveIntroducerInstance)
        Account savedAccount = account.save(flash: true)

        def result = [isError: false, message: "Introducer added successfully.", accountIntroducer: saveIntroducerInstance, accountHolder: introducerInfoCommand.accountHolder]
        String output = result as JSON
        println(output)
        render output
    }

    def introducerInfoDelete(){
        AccountIntroducer accountIntroducer = AccountIntroducer.get(params.id as Long)
        if (!accountIntroducer) {
            def result = [isError:true, message:"Introducer dose not delete successfully!"]
            render result as JSON
            return
        }
        accountIntroducer.status = false
        def savedIntroducer = accountIntroducer.save(flush: true)
        if(!savedIntroducer){
            def result = [isError:true, message:"Introducer dose not delete successfully!"]
            render result as JSON
            return
        }
        def result = [isError:false, message:"Introducer Delete successsfully!"]
        render result as JSON
    }


    def otherBankAccInfoSave(OtherBankAcInfoCommand otherBankAcInfoCommand) {

        Account account = Account.read(otherBankAcInfoCommand.accountObj.id)
        if (otherBankAcInfoCommand.hasErrors()) {
            def result = [isError: true, message: "Other bank account data have some problem!!"]
            render result as JSON
            return
        }

        if (otherBankAcInfoCommand.id) {  // update
            def row = params.row
            AccountOtherBank accountOtherBank = AccountOtherBank.get(otherBankAcInfoCommand.id)
            accountOtherBank.properties = otherBankAcInfoCommand.properties
            if (!accountOtherBank.validate()) {
                def result = [isError: true, message: "Other bank account data have some validated problem!!"]
                render result as JSON
                return
            }
            AccountOtherBank retailOtherBankUpdate = accountOtherBank.save()
            if (!retailOtherBankUpdate) {

                def result = [isError: true, message: "Other bank account data not update successfully!!"]
                render result as JSON
                return
            }

            def result = [isError: false, message: "Other bank account info update successsfully!", update: true, accountOtherBank: retailOtherBankUpdate, bank: otherBankAcInfoCommand.bank.name, branch: otherBankAcInfoCommand.branch.name, row: row]
            render result as JSON
        } else {   // add
            AccountOtherBank accountOtherBank = new AccountOtherBank(otherBankAcInfoCommand.properties)
            if (!accountOtherBank.validate()) {
                def result = [isError: true, message: "Other bank account data not validated successfully!!"]
                render result as JSON
                return
            }
            AccountOtherBank accOtherBankSaveObj = accountOtherBank.save()
            if (!accOtherBankSaveObj) {
                def result = [isError: true, message: "Other bank account data not added successfully!!"]
                render result as JSON
                return
            }

            account.getAccOtherBank().add(accOtherBankSaveObj)
            Account savedAccount = account.save(flush: true)
            def result = [isError: false, add: true, message: "Added successfully.", accountOtherBank: accOtherBankSaveObj, bank: otherBankAcInfoCommand.bank.name, branch: otherBankAcInfoCommand.branch.name]
            render result as JSON
        }

    }

    def editAccOtherBankAccount() {
        def row = params.row
        AccountOtherBank accountOtherBank = AccountOtherBank.findById(params.id as Long)
        if (!accountOtherBank) {
            def result = [isError: true, message: "Data not found"]
            render result as JSON
            return
        }
        Bank bank = Bank.findById(accountOtherBank.bank.id as Long)
        Branch branch = Branch.findById(accountOtherBank.branch.id as Long)

        def result = [isError: false, /*saveAccObj: Account.read(params.accountObj),*/ accOtherBank: accountOtherBank, bank: bank, branch: branch, row: row]
        render result as JSON
    }

    def deleteAccOtherBankAccount() {
        AccountOtherBank accountOtherBank = AccountOtherBank.get(params.id as Long)
        if (!accountOtherBank) {
            def result = [isError: true, message: "Other bank account information no found"]
            render result as JSON
            return
        }
        accountOtherBank.status = false
        AccountOtherBank retailOtherBankSaved = accountOtherBank.save(flush: true)
        if (!retailOtherBankSaved) {
            def result = [isError: true, message: "Other bank account information does not delete!!"]
            render(result as JSON)
            return
        }
        def result = [isError: false, message: "Other bank account information deleted"]
        render result as JSON
    }

    def showBankBranch(Long id) {
        Bank bank = Bank.read(id)
        if (!bank) {
            render "<option value=''>Select Branch</option>"
            return
        }
        List<Branch> branch = Branch.findAllByBank(bank)
        for (def i = 0; i < branch.size(); i++) {
            render "<option value='${branch.id[i]}'>${branch.name[i]}</option>"
        }
    }
}

class AccOpenBasicInfoCommand {

    String accountTitle
    int modeOfOperation
    int natureOfOperation
    double initialDeposit
    String accountPurpose
    Date openingDate
    String sourceOfFund
    double monthlyIncome
    boolean tAndC
    AccountOpen accountOpen

    static constraints = {
        accountTitle nullable: false
        openingDate nullable: false
        initialDeposit nullable: false
        accountPurpose nullable: false
        sourceOfFund nullable: false
        natureOfOperation nullable: false
        monthlyIncome nullable: false
        initialDeposit nullable: false
        modeOfOperation nullable: false
        tAndC nullable: false
    }
}


class IntroducerInfoCommand {
    Long id
    String relation
    AccountHolder accountHolder
    Account account
    static constraints = {
        id blank: true, nullable: true
        relation blank: false, nullable: false
        accountHolder blank: false, nullable: false
    }
}

class OtherBankAcInfoCommand {
    Long id
    String otherBankAccNo
    String accountTitle
    String otherBankAccType
    String sortCode
    Bank bank
    Branch branch
    Account accountObj

    static constraints = {
        id blank: true, nullable: true
        otherBankAccNo blank: false, nullable: false
        accountTitle blank: false, nullable: false
        otherBankAccType blank: false, nullable: false
        sortCode blank: false, nullable: false
    }
}

class AttachmentsCommand {
    Long id
    Account accountObjId

    static constraints = {
        id blank: true, nullable: true
    }
}

