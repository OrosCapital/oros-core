package com.gsl.oros.core.banking.settings

import com.gsl.oros.core.banking.product.settings.CurrencysUtility
import grails.converters.JSON

class CurrencyController {
    def currencyService

    def index() {
        LinkedHashMap resultMap = currencyService.currencyPaginateList(params)

        if (!resultMap || resultMap.totalCount == 0) {
            render(template: '/coreBanking/settings/currency/currencyList', model: [dataReturn: null, totalCount: 0])
            return
        }
        int totalCount = resultMap.totalCount
        render(template: '/coreBanking/settings/currency/currencyList', model: [dataReturn: resultMap.results, totalCount: totalCount])
    }

    def create() {
        render(view: '/coreBanking/settings/currency/_createCurrency')
    }

    def save(CurrencyCommand currencyCommand) {
        if (!request.method == 'POST') {
            render(template: '/coreBanking/settings/currency/createCurrency')
            return
        }
        if (currencyCommand.hasErrors()) {
            render(template: '/coreBanking/settings/currency/createCurrency', model: [currencys: currencyCommand])
            return
        }
        Currencys currencys
        if (params.id) {     //update Currency
            currencys = Currencys.get(currencyCommand.id)
            if (!currencys) {
                flash.message = "Currency not found"
                render(template: '/coreBanking/settings/currency/currencyList')
                return
            }
            currencys.properties = currencyCommand.properties
            if (!currencyCommand.validate()) {
                render(template: '/coreBanking/settings/currency/createCurrency', model: [currencys: currencys])
                return
            }
            currencys.save(flush: true)
            LinkedHashMap resultMap = currencyService.currencyPaginateList(params)
            flash.message = "Currency Updated successfully"
            render(template: '/coreBanking/settings/currency/currencyList', model: [dataReturn: resultMap.results, totalCount: resultMap.totalCount])
            return
        }
        currencys = new Currencys(currencyCommand.properties)
        if (!currencyCommand.validate()) {
            render(template: '/coreBanking/settings/currency/createCurrency', model: [currencys: currencys])
            return
        }
        Currencys savedCurr = currencys.save(flush: true)
        if (!savedCurr) {
            render(template: '/coreBanking/settings/currency/createCurrency', model: [currencys: currencys])
        }
        currencys.save(flush: true)

        LinkedHashMap resultMap = currencyService.currencyPaginateList(params)
        flash.message = "Currency created successfully"
        render(template: '/coreBanking/settings/currency/currencyList', model: [dataReturn: resultMap.results, totalCount: resultMap.totalCount])
        return

    }

    def delete(Long id) {
        Currencys currencys = Currencys.get(id)
        if (!currencys) {
            flash.message = "Currency not found"
            render(template: '/coreBanking/settings/currency/currencyList')
        }
        currencys.status = false
        currencys.save(flush: true)

        def result=[isError:false,message:"Currency deleted successfully"]
        String outPut=result as JSON
        render outPut
    }

    def list() {
        LinkedHashMap gridData
        String result
        LinkedHashMap resultMap =currencyService.currencyPaginateList(params)

        if(!resultMap || resultMap.totalCount== 0){
            gridData = [iTotalRecords: 0, iTotalDisplayRecords: 0, aaData: null]
            result = gridData as JSON
            render result
            return
        }
        int totalCount =resultMap.totalCount
        gridData = [iTotalRecords: totalCount, iTotalDisplayRecords: totalCount, aaData: resultMap.results]
        result = gridData as JSON
        render result

    }

    def update(Long id) {
        Currencys currencys = Currencys.read(id)
        if (!currencys) {
            flash.message = "Currency not found"
            render(template: '/coreBanking/settings/currency/currencyList')
        }
        render(template: '/coreBanking/settings/currency/createCurrency', model: [currencys: currencys])
    }

}

class CurrencyCommand {
    Long id
    String name
    String abbreviation
    String symbol
    Country country
    String hundredName
    Boolean status = true
    static constraints = {
        name nullable: false, validator: { name, currencyObj ->
            def id = currencyObj.id as Long
            if (id == null) {
                def currencyName = Currencys.findByNameAndStatus(name, true)
                if (currencyName) {
                    return 'coreBanking.setting.currency.name.unique'
                }
            } else {
                def currencyName = Currencys.withCriteria {
                    not { 'in'('id', [currencyObj.id]) }
                    and {
                        eq('status', true)
                        eq('name', name)
                    }
                }
                if (currencyName.size() > 0) {
                    return 'coreBanking.setting.currency.name.unique'
                }
            }
        }
        symbol nullable: false, validator: { symbol, currencyObj ->
            def id = currencyObj.id as Long
            if (id == null) {
                def currencySymbol = Currencys.findBySymbolAndStatus(symbol, true)
                if (currencySymbol) {
                    return 'coreBanking.setting.currency.symbol.unique'
                }
            } else {
                def currencySymbol = Currencys.withCriteria {
                    not { 'in'('id', [currencyObj.id]) }
                    and {
                        eq('status', true)
                        eq('symbol', symbol)
                    }
                }
                if (currencySymbol.size() > 0) {
                    return 'coreBanking.setting.currency.symbol.unique'
                }
            }
        }
        country nullable: false, validator: { country, currencyObj ->
            def id = currencyObj.id as Long
            def countryId = currencyObj.country.id
            if (id == null) {
                def currCountry = Currencys.findByCountryAndStatus(Country.read(countryId), true)
                if (currCountry) {
                    return 'coreBanking.setting.currency.country.unique'
                }
            } else {
                def currCountry = Currencys.withCriteria {
                    not { 'in'('id', [currencyObj.id]) }
                    and {
                        eq('status', true)
                        eq('country', Country.read(countryId))
                    }
                }
                if (currCountry.size() > 0) {
                    return 'coreBanking.setting.currency.country.unique'
                }
            }
        }
    }
}
