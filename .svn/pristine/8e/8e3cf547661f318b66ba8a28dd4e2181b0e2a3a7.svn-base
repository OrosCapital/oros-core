package com.gsl.oros.core.banking.accounting

import com.gsl.oros.core.banking.product.accounting.FislYearUtility
import com.gsl.oros.core.banking.settings.BankSetup
import com.gsl.oros.core.banking.settings.FiscalYear
import grails.converters.JSON

class FiscalYearController {
    def fiscalYearService
    def closed = [[id: 1, value: "true", status: "Active"],
            [id: 2, value: "false", status: "InActive"]]

    def index() {
        LinkedHashMap resultMap =fiscalYearService.fiscalYearPaginateList(params)
        if(!resultMap || resultMap.totalCount== 0){
            render(view: '/coreBanking/settings/accounting/fiscalYear/_fiscalYearList',
                    model: [dateFormate: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                            dateMask: "99/99/9999",dataReturns: null, totalCount: 0,
                            closed: closed.toList()])
            return
        }
        int totalCount =resultMap.totalCount
        render(view: '/coreBanking/settings/accounting/fiscalYear/_fiscalYearList',
                model: [dateFormate: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                        dateMask: "99/99/9999",dataReturns: resultMap.results, totalCount: totalCount,
                        closed: closed.toList()])

    }

    def create() {

        render(view: '/coreBanking/settings/accounting/fiscalYear/_createFiscalYear',
                model: [dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                        dateMask: "99/99/9999",
                        beginingDate: new Date().format("dd/MM/yyyy"),
                        endingDate: new Date().format("dd/MM/yyyy"),
                        closed: closed.toList()])

    }

    def save(FiscalYearCommand fiscalYearCommand) {

        if (!request.method == 'POST') {
            render(template: '/coreBanking/settings/accounting/fiscalYear/createFiscalYear')
            return
        }
        if (fiscalYearCommand.hasErrors()) {
            render(template: '/coreBanking/settings/accounting/fiscalYear/createFiscalYear', model: [fiscalYear: fiscalYearCommand])
            return
        }
        FiscalYear fiscalYear
        if (params.id) {     //update exchangeRate
            fiscalYear = FiscalYear.get(fiscalYearCommand.id)
            if (!fiscalYear) {
                flash.message = "Fiscal Year not found"
                render(template: '/coreBanking/settings/accounting/fiscalYear/fiscalYearList')
                return
            }
            if (fiscalYearCommand.closed == true) {
                def c = FiscalYear.createCriteria()
                def activeFiscalY = c.list {
                    not { 'in'("id", [fiscalYearCommand.id]) }
                    and {
                        eq("closed", true)
                        eq("status", true)
                    }
                }
                if (activeFiscalY.size() > 0) {
                    flash.message = "One Fiscal Year Already Active"
                    render(view: '/coreBanking/settings/accounting/fiscalYear/_createFiscalYear',
                            model: [fiscalYear: fiscalYearCommand,
                                    beginingDate: fiscalYearCommand.beginingDate.format("dd/MM/yyyy"),
                                    endingDate: fiscalYearCommand.endingDate.format("dd/MM/yyyy"),
                                    closed: closed.toList()])
                    return
                }
            }
            fiscalYear.properties = fiscalYearCommand.properties

            if (!fiscalYear.validate()) {
                render(template: '/coreBanking/settings/accounting/fiscalYear/createFiscalYear', model: [fiscalYear: fiscalYear])
                return
            }
            fiscalYear.save(flush: true)
            flash.message = "Fiscal Year Updated successfully"
            LinkedHashMap resultMap =fiscalYearService.fiscalYearPaginateList(params)
            render(template: '/coreBanking/settings/accounting/fiscalYear/fiscalYearList',model: [dataReturns: resultMap.results, totalCount: resultMap.totalCount])

            return

        }
        fiscalYear = new FiscalYear()
        if (fiscalYearCommand.closed == true) {
            def activeFiscalY = FiscalYear.findByClosedAndStatus(true, true)
            if (activeFiscalY) {
                flash.message = "One Fiscal Year Already Active"
                render(view: '/coreBanking/settings/accounting/fiscalYear/_createFiscalYear',
                        model: [fiscalYear: fiscalYearCommand,
                                beginingDate: fiscalYearCommand.beginingDate.format("dd/MM/yyyy"),
                                endingDate: fiscalYearCommand.endingDate.format("dd/MM/yyyy"),
                                closed: closed.toList()])
                return
            }
        }

        fiscalYear.properties = fiscalYearCommand.properties

        if (!fiscalYear.validate()) {
            render(template: '/coreBanking/settings/accounting/fiscalYear/createFiscalYear', model: [fiscalYear: fiscalYear])
            return
        }
        FiscalYear saveFisYear = fiscalYear.save(flush: true)
        if (!saveFisYear) {
            render(template: '/coreBanking/settings/accounting/fiscalYear/createFiscalYear', model: [fiscalYear: fiscalYear])
        }
        flash.message = "Fiscal Year created successfully"
        LinkedHashMap resultMap =fiscalYearService.fiscalYearPaginateList(params)
        render(template: '/coreBanking/settings/accounting/fiscalYear/fiscalYearList',model: [dataReturns: resultMap.results, totalCount: resultMap.totalCount])
//        render(template: '/coreBanking/settings/accounting/fiscalYear/fiscalYearList', model: [fiscalYear: fiscalYearCommand])
        return

    }

    def delete(Long id) {
        FiscalYear fiscalYear = FiscalYear.get(id)
        if (!fiscalYear) {
            flash.message = "Fiscal Year not found"
            render(template: '/coreBanking/settings/accounting/fiscalYear/fiscalYearList')
        }
        fiscalYear.status = false
        fiscalYear.save(flush: true)
        def result=[isError:false,message:"Fiscal Year deleted successfully"]
        String outPut=result as JSON
        render outPut

    }

    def update(Long id) {
        FiscalYear fiscalYear = FiscalYear.read(id)
        if (!fiscalYear) {
            flash.message = "Fiscal Year not found"
            render(template: '/coreBanking/settings/accounting/fiscalYear/fiscalYearList')
            return
        }

        def beginingDate = fiscalYear.beginingDate.format("dd/MM/yyyy")
        def endingDate = fiscalYear.endingDate.format("dd/MM/yyyy")
        render(template: '/coreBanking/settings/accounting/fiscalYear/createFiscalYear',
                model: [fiscalYear: fiscalYear,
                        dateFormat: BankSetup.properties.bankDateFormat ? BankSetup.properties.bankDateFormat : "dd/mm/yyyy",
                        closed: closed.toList(),
                        beginingDate: beginingDate,
                        endingDate: endingDate,
                        dateMask: "99/99/9999"])
        return

    }


    def list() {
        LinkedHashMap gridData
        String result
        LinkedHashMap resultMap =fiscalYearService.fiscalYearPaginateList(params)
        if(!resultMap || resultMap.totalCount== 0){
            gridData = [iTotalRecords: 0, iTotalDisplayRecords: 0, aaData: null]
            result = gridData as JSON
            render result
            return
        }
        int totalCount =resultMap.totalCount
        gridData = [iTotalRecords: totalCount, iTotalDisplayRecords: totalCount, aaData: resultMap.results]
        result = gridData as JSON
        render result

    }
}

class FiscalYearCommand {
    Long id
    Date beginingDate
    Date endingDate
    Boolean closed
    Boolean status = true
    static constraints = {
//        closed nullable: false,unique:true
    }
}
