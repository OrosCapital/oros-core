package com.gsl.oros.core.banking.operation

import com.gsl.oros.core.banking.operation.dormantAccount.DorAccReactivate
import com.gsl.plugin.attachments.AttachStatus
import com.gsl.plugin.attachments.OrosAttachment
import grails.converters.JSON
import org.springframework.web.multipart.MultipartFile

class DormantAccountController {
    def dormantAccountService
    def mailService
    def imageIndirectService

    def index() {
        LinkedHashMap resultMap = dormantAccountService.dormantAccList(params)
        if (!resultMap || resultMap.totalCount == 0) {
            render(view: '/coreBanking/settings/operation/dormantAccount/dormantAccount', model: [dataReturns: null, totalCount: 0])
            return
        }
        int totalCount = resultMap.totalCount
        render(view: '/coreBanking/settings/operation/dormantAccount/dormantAccount', model: [dataReturns: resultMap.results, totalCount: totalCount])
    }

    def accountNoVerify(){
        def verifyAccountNo = Client.findByAccountNo(params.accountNo)
        def dormantAccount=DorAccReactivate.findByClient(verifyAccountNo)
        if (verifyAccountNo) {
            def result = [isError: false, accountInfo: verifyAccountNo,dormantAcc:dormantAccount.id]
            String outPut = result as JSON
            render outPut
            return
        }
        def result = [isError: true, message: "Account Holder Not Found"]
        render result as JSON
    }

    def reactivate(){
            render (view: "/coreBanking/settings/operation/dormantAccount/reActivateAcc",model: [tabSelectIndicator:1,dormantAccId:0])
    }

    def attachment(){
       Long dormantAccId=params.getLong('dormantAccountId')
        def dorAccReactivate=DorAccReactivate.get(dormantAccId)

        def file = request.getFile('attachment')

        String name = dorAccReactivate.client.name + " document for reactivate dormant account"
        String originalName = file.originalFilename
        String type = file.contentType
        Long size = file.size
        String caption= params.caption

        if (!request.method == 'POST') {
          render(view: '/coreBanking/settings/operation/dormantAccount/reActivateAcc')
            return
        }

        Boolean evidenceAttachCon=evidenceAttach(file)
        if(evidenceAttachCon==false){
            flash.message="Sorry Attachment Upload in Terminated"
            render(view: '/coreBanking/settings/operation/dormantAccount/reActivateAcc')
            return
        }

        OrosAttachment orosAttachment = new OrosAttachment(
                name: name,
                originalName: originalName,
                caption: caption,
                type: type,
                fileDir: "dormantAccountReactivate/" + dorAccReactivate.client.accountNo.toString(),
                size: size
        )
        if (!orosAttachment.validate()) {
            flash.message="Sorry Attachment Upload in Terminated"
            render(view: '/coreBanking/settings/operation/dormantAccount/reActivateAcc')
            return
        }

        OrosAttachment saveAttachment = orosAttachment.save(flush: true)
        if (!saveAttachment) {
            flash.message="Sorry Attachment Upload in Terminated"
            render(view: '/coreBanking/settings/operation/dormantAccount/reActivateAcc')
            return
        }
        dorAccReactivate.addToAttachments(saveAttachment)
        println(dorAccReactivate.attachments.size())
        File uploadInDirectory = imageIndirectService.storeFile(file, orosAttachment.link, orosAttachment.fileDir)
        render(view: '/coreBanking/settings/operation/dormantAccount/_evidenceAttachList',model: [evidenceAttach:dorAccReactivate,dormantAccId:dormantAccId])
    }

    private Boolean evidenceAttach(file) {
        String type = file.contentType
        Long size = file.size

        if (!(type in ['image/jpeg', 'image/gif', 'image/bmp', 'image/png', 'image/jpg'])) {
            return false
        }
        if (size >= 900000) {
            return false
        }

    }

    def list() {
        LinkedHashMap gridData
        String result
        LinkedHashMap resultMap = dormantAccountService.dormantAccList(params)
        if (!resultMap || resultMap.totalCount == 0) {
            gridData = [iTotalRecords: 0, iTotalDisplayRecords: 0, aaData: null]
            result = gridData as JSON
            render result
            return
        }
        int totalCount = resultMap.totalCount
        gridData = [iTotalRecords: totalCount, iTotalDisplayRecords: totalCount, aaData: resultMap.results]
        result = gridData as JSON
        render result
    }

    def email() {
        if (!request.method == 'post') {
            def result = [isError: true, message: "Request Method Is Not Post"]
            String outPut = result as JSON
            render outPut
        }
        def clientInfo = Client.get(params.getLong('id'))
        if (!clientInfo) {
            def result = [isError: true, message: "Email Send Is Terminated"]
            String outPut = result as JSON
            render outPut
        }

        DorAccReactivate dorAccReactivate=new DorAccReactivate()
        dorAccReactivate.client=clientInfo
        DorAccReactivate savedAccAsDormantAcc=dorAccReactivate.save(flush: true)
        if(!savedAccAsDormantAcc){
            def result = [isError: true, message: "Email Send Is Terminated"]
            String outPut = result as JSON
            render outPut
        }

        try {
            mailService.sendMail {
                async true
                to "${clientInfo.signatureUrl}"
                subject "Inform for your dormant account reactivation"
                html g.render(template: "/mailTemplate/dorAccMailBody", model: [clientInfo: clientInfo])
            }
        } catch (Exception e) {}


        def result = [isError: false, message: "Successfully Send Email"]
        String outPut = result as JSON
        render outPut
    }

    def delete(){
        Long attachmentId=params.getLong('attachmentId')
        Long dormantAccId=params.getLong('dormantAccId')
       DorAccReactivate dorAccReactivate=DorAccReactivate.get(dormantAccId)
        if(!dorAccReactivate) {
          return
        }
        OrosAttachment orosAttachment=dorAccReactivate.attachments.find{it.id==attachmentId}
        orosAttachment.status=AttachStatus.DELETED
        DorAccReactivate savedDormantAcc=dorAccReactivate.save()
        if(!savedDormantAcc){
            return
        }
        savedDormantAcc.attachments?.removeAll {it.status==AttachStatus.DELETED}

        render(view: '/coreBanking/settings/operation/dormantAccount/_evidenceAttachList',model: [evidenceAttach:savedDormantAcc,dormantAccId:dormantAccId])
    }
}
